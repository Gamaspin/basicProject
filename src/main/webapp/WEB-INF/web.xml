<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>/WEB-INF/spring-servlet/applicationContext.xml</param-value>
    </context-param>

    <!--
            ContextLoaderListener 클래스는 ServletContextListener 인터페이스를 구현하고 있으며, ApplicationContext를 생성하는 역할을 수행한다.
            Servlet의 생명주기를 관리해준다.
            Servlet을 사용하는 시점에 서블릿 컨텍스트에 ApplicationContext 등록, Servlet이 종료되는 시점에 ApplicationContext 삭제
            ContextLoaderListener 객체는 context-param의 param-name으로 정의한 param-value값의 장소로 가서 지정된 파일을 로딩하여 스프링 컨테이너를 구동하는데 이를 Root 컨테이너 라고 한다.
        -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    <!-- 여기에 공통적으로 사용할 클래스들을 인스턴스화 하여 컨테이너에 담아놓는 역할 (Root container) 드라이버매니저데이터소스/sql세션팩토리빈/sql세션템플릿 위치는 context-param 참조-->
    <servlet>
        <!-- 클라이언트가 요청을 보내면 처리하는 곳으로 넘겨주고 응답을 클라이언트에게 넘겨주는 곳을 정함 dispatcherServlet -->
        <!-- disapacther servlet이 직접적으로 사용하는 controller를 포함한 웹 관련 bean -->
        <!-- Servlet WebApplicationContext 해당 servlet에서만 사용 가능, 각각의 servlet에서 사용하는 view자원을 구성할때-->
        <servlet-name>dispatcher</servlet-name> <!-- 내부에서 부를 서블릿 명 -->
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class> <!-- 해당 클래스를 dispatcher servlet 으로 정의한다. -->
        <init-param>
            <!-- dispatcherServlet의 속성 정의, servlet에서 사용할 name-value 쌍을 선언함-->
            <param-name>contextConfigLocation</param-name> <!-- context의 대체 위치를 지정  -->
            <param-value>/WEB-INF/spring-servlet/dispatcher-servlet.xml</param-value> <!-- 위치에서 로드한다-->
            <!-- 웹 어플리케이션 전반에 걸처 공유할 파라미터 설정 (Root WebApplicationContext)
서비스계층( 트랜잭션, 보안, 리모팅, 메일, 메시징, 스케줄링…), DAO를 포함한 웹과 독립적인 beans-->
        </init-param>
        <load-on-startup>1</load-on-startup> <!--  서블릿이 여러 개라면,로딩 순번을 정할 수 있다.-->
    </servlet>
    <servlet-mapping> <!-- 아래의 내부 서블릿 이름으로 요소를 찾아서 url로 호출하기 위한 설정을 한다.  -->
        <servlet-name>dispatcher</servlet-name> <!-- 매핑할 servlet-name을 선언, 클라이언트가 지정한 URL패턴을 호출하면 해당이름의 서블릿을 찾아 생성한다.  -->
        <url-pattern>/</url-pattern> <!-- 클라이언트가 요청할 URL패턴 -->
    </servlet-mapping>

    <!-- 한글 깨지지 않게 UTF-8 설정 -->
    <filter>
        <filter-name>encodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
    </filter>

    <filter-mapping>
        <filter-name>encodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>


    <!-- 한글 깨지지 않게 UTF-8 설정 -->
    <filter>
        <filter-name>encoding</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name> <!-- 강제적으로 인코딩 할건지 여부를 확인한다. -->
            <param-value>true</param-value><!-- true일 시, HttpServletRequest, HttpServletResponse 객체 둘 모두에게 기존 값을 무시하고  내가 설정한 값으로 인코딩한다. -->
            <!-- false 일 시, HttpServletRequest의 객체에 특정 인코딩이 들어가있으면 강제로 변환하지 않는다.-->
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encoding</filter-name>
        <url-pattern>/*</url-pattern><!-- 설정한 하위 주소 전부-->
    </filter-mapping>


</web-app>